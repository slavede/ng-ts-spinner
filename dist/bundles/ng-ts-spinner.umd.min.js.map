{"version":3,"file":"ng-ts-spinner.umd.min.js","sources":["~/ng-ts-spinner/src/ng-ts-spinner/ng-ts-spinner.directive.ts","~/ng-ts-spinner/src/ng-ts-spinner/ng-ts-spinner.module.ts"],"sourcesContent":["import {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  Renderer2,\n} from '@angular/core';\n\ndeclare var Spinner: any;\nexport class NgTsSpinnerDirective implements OnChanges, DoCheck {\n   spinOn: boolean;\n   overlayWhileSpin = false;\n   options: {};\nprivate spinner;\nprivate mergedOptions = {};\nprivate defaults = {\n    lines: 13 // The number of lines to draw\n    , length: 28 // The length of each line\n    , width: 14 // The line thickness\n    , radius: 42 // The radius of the inner circle\n    , scale: 1 // Scales overall size of the spinner\n    , corners: 1 // Corner roundness (0..1)\n    , color: '#000' // #rgb or #rrggbb or array of colors\n    , opacity: 0.25 // Opacity of the lines\n    , rotate: 0 // The rotation offset\n    , direction: 1 // 1: clockwise, -1: counterclockwise\n    , speed: 1 // Rounds per second\n    , trail: 60 // Afterglow percentage\n    , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS\n    , zIndex: 2e9 // The z-index (defaults to 2000000000)\n    , className: 'spinner' // The CSS class to assign to the spinner\n    , top: '50%' // Top position relative to parent\n    , left: '50%' // Left position relative to parent\n    , shadow: false // Whether to render a shadow\n    , hwaccel: false // Whether to use hardware acceleration\n    , position: 'absolute' // Element positioning\n  };\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\nprivate elementRef: ElementRef,\nprivate renderer: Renderer2\n  ) {\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\npublic ngOnChanges(changes: SimpleChanges): void {\n    const /** @type {?} */ spinOnValue = changes['spinOn'] ? changes['spinOn'].currentValue : undefined;\n    const /** @type {?} */ optionsValue = changes['options'] ? changes['options'].currentValue : undefined;\n\n    if (optionsValue) {\n      Object.assign(this.mergedOptions, this.defaults, this.options);\n    }\n\n    if (spinOnValue !== undefined) {\n      if (spinOnValue === true) {\n        this.spinner = new Spinner(this.mergedOptions).spin(this.elementRef.nativeElement);\n        if (this.overlayWhileSpin) {\n          const /** @type {?} */ overlay = this.renderer.createElement('span');\n          this.renderer.addClass(overlay, 'spinner-overlay');\n          this.renderer.setStyle(overlay, 'position', 'absolute');\n          this.renderer.setStyle(overlay, 'top', '0');\n          this.renderer.setStyle(overlay, 'left', '0');\n          this.renderer.setStyle(overlay, 'width', '100%');\n          this.renderer.setStyle(overlay, 'height', '100%');\n          this.renderer.setStyle(overlay, 'background-color', 'gray');\n          this.renderer.setStyle(overlay, 'opacity', '0.4');\n          this.renderer.setStyle(overlay, 'z-index', '1111111111');\n\n          this.renderer.appendChild(this.elementRef.nativeElement, overlay);\n        }\n      } else if (this.spinner) {\n        this.spinner.stop();\n        if (this.overlayWhileSpin) {\n          this.renderer.removeChild(this.elementRef.nativeElement, this.elementRef.nativeElement.querySelector('.spinner-overlay'));\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\npublic ngDoCheck() {\n    if (this.options) {\n      Object.assign(this.mergedOptions, this.defaults, this.options);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\nselector: '[ng-ts-spinner]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'spinOn': [{ type: Input },],\n'overlayWhileSpin': [{ type: Input },],\n'options': [{ type: Input },],\n};\n}\n\nfunction NgTsSpinnerDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTsSpinnerDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTsSpinnerDirective.ctorParameters;\n/** @type {?} */\nNgTsSpinnerDirective.propDecorators;\n/** @type {?} */\nNgTsSpinnerDirective.prototype.spinOn;\n/** @type {?} */\nNgTsSpinnerDirective.prototype.overlayWhileSpin;\n/** @type {?} */\nNgTsSpinnerDirective.prototype.options;\n/** @type {?} */\nNgTsSpinnerDirective.prototype.spinner;\n/** @type {?} */\nNgTsSpinnerDirective.prototype.mergedOptions;\n/** @type {?} */\nNgTsSpinnerDirective.prototype.defaults;\n/** @type {?} */\nNgTsSpinnerDirective.prototype.elementRef;\n/** @type {?} */\nNgTsSpinnerDirective.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { NgTsSpinnerDirective } from './ng-ts-spinner.directive';\nexport class NgTsSpinnerModule {\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations : [NgTsSpinnerDirective],\n  exports: [NgTsSpinnerDirective]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgTsSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTsSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTsSpinnerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NgTsSpinnerDirective","elementRef","renderer","this","overlayWhileSpin","mergedOptions","defaults","lines","length","width","radius","scale","corners","color","opacity","rotate","direction","speed","trail","fps","zIndex","className","top","left","shadow","hwaccel","position","prototype","ngOnChanges","changes","spinOnValue","currentValue","undefined","Object","assign","options","spinner","Spinner","spin","nativeElement","overlay","createElement","addClass","setStyle","appendChild","stop","removeChild","querySelector","ngDoCheck","decorators","type","Directive","args","selector","ctorParameters","ElementRef","Renderer2","propDecorators","spinOn","Input","NgTsSpinnerModule","NgModule","declarations","exports"],"mappings":"wPAWA,IAAAA,EAAA,WAgCA,SAAAA,EAEYC,EACAC,GADAC,KAAZF,WAAYA,EACAE,KAAZD,SAAYA,EAjCTC,KAAHC,kBAEsB,EAIZD,KAAVE,iBAEUF,KAAVG,UAHIC,MAIO,GACLC,OAAQ,GACRC,MAAO,GACPC,OAAQ,GACRC,MAAO,EACPC,QAAS,EACTC,MAAO,OACPC,QAAS,IACTC,OAAQ,EACRC,UAAW,EACXC,MAAO,EACPC,MAAO,GACPC,IAAK,GACLC,OAAQ,IACRC,UAAW,UACXC,IAAK,MACLC,KAAM,MACNC,QAAQ,EACRC,SAAS,EACTC,SAAU,mBASb1B,EAAH2B,UAAAC,YAAG,SAAAC,GAGC,IAFMC,EAAcD,EAAS,OAAWA,EAAS,OAASE,aAAeC,UASzE,IARqBH,EAAS,QAAYA,EAAS,QAAUE,aAAeC,YAK1EC,OAFOC,OAAO/B,KAAKE,cAAeF,KAAKG,SAAUH,KAAKgC,SAKpDL,IAFgBE,UAGlB,IAFoB,IAEhBF,GAEF,GADA3B,KAFKiC,QAAU,IAAIC,QAAQlC,KAAKE,eAAeiC,KAAKnC,KAAKF,WAAWsC,eAGhEpC,KAFKC,iBAAkB,CAGzB,IAFMoC,EAAUrC,KAAKD,SAASuC,cAAc,QAG5CtC,KAFKD,SAASwC,SAASF,EAAS,mBAGhCrC,KAFKD,SAASyC,SAASH,EAAS,WAAY,YAG5CrC,KAFKD,SAASyC,SAASH,EAAS,MAAO,KAGvCrC,KAFKD,SAASyC,SAASH,EAAS,OAAQ,KAGxCrC,KAFKD,SAASyC,SAASH,EAAS,QAAS,QAGzCrC,KAFKD,SAASyC,SAASH,EAAS,SAAU,QAG1CrC,KAFKD,SAASyC,SAASH,EAAS,mBAAoB,QAGpDrC,KAFKD,SAASyC,SAASH,EAAS,UAAW,OAG3CrC,KAFKD,SAASyC,SAASH,EAAS,UAAW,cAI3CrC,KAFKD,SAAS0C,YAAYzC,KAAKF,WAAWsC,cAAeC,SAEtDrC,KAASiC,UAGdjC,KAFKiC,QAAQS,OAGT1C,KAFKC,kBAGPD,KAFKD,SAAS4C,YAAY3C,KAAKF,WAAWsC,cAAepC,KAAKF,WAAWsC,cAAcQ,cAAc,uBAM5G/C,EAAH2B,UAAAqB,UAAG,WAKK7C,KAJKgC,SAKPF,OAJOC,OAAO/B,KAAKE,cAAeF,KAAKG,SAAUH,KAAKgC,YA3E5D,GA8EOnC,EAAPiD,aACEC,KAAMC,EAAAA,UAAWC,OAKnBC,SAJU,sBAITrD,EAADsD,eAAC,WAAA,QAOAJ,KAAMK,EAAAA,aACNL,KAAMM,EAAAA,aAJAxD,EAAPyD,gBAOAC,SANaR,KAAMS,EAAAA,QAOnBvD,mBANuB8C,KAAMS,EAAAA,QAO7BxB,UANce,KAAMS,EAAAA,SCpGpB,IAAAC,EAAA,kBAAA,aAAA,GAIOA,EAAPX,aACEC,KAAMW,EAAAA,SAAUT,OADhBU,cAEe9D,GADf+D,SAES/D,OAIV4D,EAADN,eAAC,WAAA"}
